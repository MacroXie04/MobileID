# =============================================================================
# Django Security Settings (REQUIRED)
# =============================================================================

# SECURITY WARNING: Generate a strong secret key for production!
# You can generate one using: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
SECRET_KEY=your-super-secret-key-here

# SECURITY WARNING: Don't run with debug turned on in production!
DEBUG=False

# =============================================================================
# Application Configuration
# =============================================================================

# Comma-separated list of allowed hosts
ALLOWED_HOSTS=localhost,127.0.0.1,yourdomain.com

# Project mode settings
API_SERVER=True
WEB_ADMIN=True
SELENIUM_ENABLED=False

# =============================================================================
# CORS and Security Settings
# =============================================================================

# Comma-separated list of allowed CORS origins
CORS_ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,http://127.0.0.1:3000

# Comma-separated list of trusted CSRF origins
CSRF_TRUSTED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,http://127.0.0.1:3000

# CORS credentials
CORS_ALLOW_CREDENTIALS=True

# CSRF Cookie settings
CSRF_COOKIE_SAMESITE=Lax
CSRF_COOKIE_HTTPONLY=False

# =============================================================================
# Session Configuration
# =============================================================================

# Session cookie age in seconds (86400 = 1 day)
SESSION_COOKIE_AGE=86400
SESSION_EXPIRE_AT_BROWSER_CLOSE=False
SESSION_SAVE_EVERY_REQUEST=True
SESSION_ENGINE=django.contrib.sessions.backends.db

# =============================================================================
# JWT Token Configuration
# =============================================================================

# JWT token lifetimes
JWT_ACCESS_TOKEN_LIFETIME_MINUTES=15
JWT_REFRESH_TOKEN_LIFETIME_DAYS=1
JWT_ROTATE_REFRESH_TOKENS=False
JWT_BLACKLIST_AFTER_ROTATION=False
JWT_ALGORITHM=HS256

# =============================================================================
# Database Configuration
# =============================================================================

# Database engine (default: SQLite for development)
DB_ENGINE=django.db.backends.sqlite3
DB_NAME=db.sqlite3

# For PostgreSQL, use these settings:
# DB_ENGINE=django.db.backends.postgresql
# DB_NAME=barcode_db
# DB_USER=your_db_user
# DB_PASSWORD=your_db_password
# DB_HOST=localhost
# DB_PORT=5432

# For MySQL, use these settings:
# DB_ENGINE=django.db.backends.mysql
# DB_NAME=barcode_db
# DB_USER=your_db_user
# DB_PASSWORD=your_db_password
# DB_HOST=localhost
# DB_PORT=3306

# Database credentials (leave empty for SQLite)
DB_USER=
DB_PASSWORD=
DB_HOST=
DB_PORT=

# =============================================================================
# Cache Configuration
# =============================================================================

# Cache backend
CACHE_BACKEND=django.core.cache.backends.locmem.LocMemCache
CACHE_LOCATION=unique-snowflake

# For Redis cache, use these settings:
# CACHE_BACKEND=django.core.cache.backends.redis.RedisCache
# CACHE_LOCATION=redis://127.0.0.1:6379/1

# =============================================================================
# Security and Account Settings
# =============================================================================

# Maximum number of failed login attempts before locking the account
MAX_FAILED_LOGIN_ATTEMPTS=5

# Duration in minutes for which an account should be locked
ACCOUNT_LOCKOUT_DURATION=30

# =============================================================================
# Additional Notes
# =============================================================================

# 1. Copy this file to .env and fill in your actual values
# 2. Never commit .env files to version control
# 3. Generate a strong SECRET_KEY for production environments
# 4. Set DEBUG=False in production
# 5. Configure proper ALLOWED_HOSTS for production
# 6. Use a proper database (PostgreSQL/MySQL) for production
# 7. Consider using Redis for caching in production