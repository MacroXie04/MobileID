"""
Django settings for barcode project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent
# Prefer real env vars; then supplement from .env if present (do NOT override)
load_dotenv(BASE_DIR / ".env", override=False)

def env(key, default=None):
    return os.environ.get(key, default)

def csv_env(key, default_list=None):
    raw = env(key)
    if not raw:
        return default_list or []
    return [x.strip() for x in raw.split(",") if x.strip()]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY", "dev-secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG", "False").lower() == "true"

# Hosts (localhost ONLY)
ALLOWED_HOSTS = csv_env("ALLOWED_HOSTS", ["localhost"])

INSTALLED_APPS = [
    # index app
    "index.apps.IndexConfig",
    # user authentication
    "authn.apps.AuthnConfig",
    # Django REST framework
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework.authtoken",
    "corsheaders",
    # modules
    "widget_tweaks",
    "django_extensions",
    # Default Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# Static files
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MIDDLEWARE = [
    # CORS middleware must be placed before Django's security middleware
    "corsheaders.middleware.CorsMiddleware",
    # Default Django middleware
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

BACKEND_ORIGIN = env("BACKEND_ORIGIN", "http://localhost:8000")
FRONTEND_ORIGINS = csv_env(
    "CORS_ALLOWED_ORIGINS", ["http://localhost:5173", "http://localhost:8080"]
)

# Django 5 requires scheme://host[:port]
CSRF_TRUSTED_ORIGINS = csv_env(
    "CSRF_TRUSTED_ORIGINS", [BACKEND_ORIGIN, *FRONTEND_ORIGINS]
)

# If using django-cors-headers:
CORS_ALLOWED_ORIGINS = FRONTEND_ORIGINS
CORS_ALLOW_CREDENTIALS = env("CORS_ALLOW_CREDENTIALS", "True").lower() == "true"

# Cookies (dev)
SESSION_COOKIE_SAMESITE = env("COOKIE_SAMESITE", "Lax")
CSRF_COOKIE_SAMESITE    = env("CSRF_COOKIE_SAMESITE", "Lax")
SESSION_COOKIE_SECURE   = env("COOKIE_SECURE", "False").lower() == "true"
CSRF_COOKIE_SECURE      = SESSION_COOKIE_SECURE
CSRF_COOKIE_HTTPONLY    = env("CSRF_COOKIE_HTTPONLY", "False").lower() == "true"

# HTTPS settings for development
# Note: These should be configured differently for production
if os.getenv("USE_HTTPS", "False").lower() == "true":
    SECURE_SSL_REDIRECT = False  # Don't redirect in development
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Session settings - Set to 10 years (effectively unlimited)
SESSION_COOKIE_AGE = 315360000  # 10 years in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session alive even after browser close
SESSION_SAVE_EVERY_REQUEST = True  # Update session expiry on each request

# CORS settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "authn.middleware.authentication.CookieJWTAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/day",
        "user": "1000/day",
        "login": "5/minute",
        "registration": "5/day",
        "barcode_generation": "100/hour",
        "barcode_management": "50/hour",
        "user_profile": "20/hour",
    },
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=3650),  # 10 years
    "REFRESH_TOKEN_LIFETIME": timedelta(days=3650),  # 10 years
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
}

ROOT_URLCONF = "mobileid.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mobileid.wsgi.application"

# Database
_mysql_options = {"charset": "utf8mb4"}
_db_init_cmd = env("DB_INIT_COMMAND")
if _db_init_cmd:
    _mysql_options["init_command"] = _db_init_cmd

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": env("DB_NAME", "mobileid_dev"),
        "USER": env("DB_USER", "mobileid"),
        "PASSWORD": env("DB_PASSWORD", ""),
        "HOST": env("DB_HOST", "host.docker.internal"),
        "PORT": env("DB_PORT", "3306"),
        "OPTIONS": _mysql_options,
        "TEST": {"NAME": "mobileid_test"},
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # Password validation disabled - no restrictions on password complexity
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = env("TIME_ZONE", "America/Los_Angeles")

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Account security settings
MAX_FAILED_LOGIN_ATTEMPTS = int(os.getenv("MAX_FAILED_LOGIN_ATTEMPTS", "5"))
ACCOUNT_LOCKOUT_DURATION = int(os.getenv("ACCOUNT_LOCKOUT_DURATION", "30"))

# Cache configuration
# Use only local memory cache and database session backend (no Redis support)
CACHE_BACKEND = os.getenv(
    "CACHE_BACKEND", "django.core.cache.backends.locmem.LocMemCache"
)
CACHE_LOCATION = os.getenv("CACHE_LOCATION", "unique-snowflake")

CACHES = {
    "default": {
        "BACKEND": CACHE_BACKEND,
        "LOCATION": CACHE_LOCATION,
    }
}
SESSION_ENGINE = os.getenv("SESSION_ENGINE", "django.contrib.sessions.backends.db")
