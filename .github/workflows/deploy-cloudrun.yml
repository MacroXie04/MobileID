name: Build & Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION:     ${{ vars.GCP_REGION }}
  GAR_REPO:       ${{ vars.GAR_REPO }}
  CLOUD_RUN_SERVICE: ${{ vars.CLOUD_RUN_SERVICE }}
  CLOUDSQL_INSTANCE: ${{ vars.CLOUDSQL_INSTANCE }}

  DEBUG: ${{ vars.DEBUG }}
  ALLOWED_HOSTS: ${{ vars.ALLOWED_HOSTS }}
  CORS_ALLOWED_ORIGINS: ${{ vars.CORS_ALLOWED_ORIGINS }}
  CSRF_TRUSTED_ORIGINS: ${{ vars.CSRF_TRUSTED_ORIGINS }}
  CORS_ALLOW_CREDENTIALS: ${{ vars.CORS_ALLOW_CREDENTIALS }}
  SESSION_COOKIE_SAMESITE: ${{ vars.SESSION_COOKIE_SAMESITE }}
  SESSION_COOKIE_SECURE: ${{ vars.SESSION_COOKIE_SECURE }}
  CSRF_COOKIE_SAMESITE: ${{ vars.CSRF_COOKIE_SAMESITE }}
  CSRF_COOKIE_SECURE: ${{ vars.CSRF_COOKIE_SECURE }}
  SESSION_COOKIE_DOMAIN: ${{ vars.SESSION_COOKIE_DOMAIN }}
  CSRF_COOKIE_DOMAIN: ${{ vars.CSRF_COOKIE_DOMAIN }}
  WEBAUTHN_RP_ID: ${{ vars.WEBAUTHN_RP_ID }}
  BACKEND_ORIGIN: ${{ vars.BACKEND_ORIGIN }}
  TIME_ZONE: ${{ vars.TIME_ZONE }}
  MAX_FAILED_LOGIN_ATTEMPTS: ${{ vars.MAX_FAILED_LOGIN_ATTEMPTS }}
  ACCOUNT_LOCKOUT_DURATION: ${{ vars.ACCOUNT_LOCKOUT_DURATION }}
  CACHE_BACKEND: ${{ vars.CACHE_BACKEND }}
  CACHE_LOCATION: ${{ vars.CACHE_LOCATION }}
  SESSION_ENGINE: ${{ vars.SESSION_ENGINE }}

  DB_ENGINE: ${{ vars.DB_ENGINE }}
  DB_NAME:   ${{ vars.DB_NAME }}
  DB_HOST:   ${{ vars.DB_HOST }}
  DB_PORT:   ${{ vars.DB_PORT }}

jobs:
  deploy:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate required secrets and variables
        run: |
          if [ -z "${{ secrets.WIF_PROVIDER }}" ]; then
            echo "ERROR: WIF_PROVIDER secret is not set"
            echo "Please run the bootstrap script (.ops/gcp/bootstrap.sh) to set up Workload Identity Federation"
            exit 1
          fi
          if [ -z "${{ secrets.DEPLOYER_SA_EMAIL }}" ]; then
            echo "ERROR: DEPLOYER_SA_EMAIL secret is not set"
            echo "Please run the bootstrap script (.ops/gcp/bootstrap.sh) to set up the service account"
            exit 1
          fi
          if [ -z "${{ vars.GCP_PROJECT_ID }}" ]; then
            echo "ERROR: GCP_PROJECT_ID variable is not set"
            echo "Please run the bootstrap script (.ops/gcp/bootstrap.sh) to configure GitHub variables"
            exit 1
          fi
          echo "All required secrets and variables are configured"

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.DEPLOYER_SA_EMAIL }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - uses: google-github-actions/setup-gcloud@v2

      - name: Configure Artifact Registry auth
        run: gcloud auth configure-docker "${GCP_REGION}-docker.pkg.dev" --quiet

      - name: Compute image tag
        run: echo "IMAGE=${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${GAR_REPO}/${CLOUD_RUN_SERVICE}:${GITHUB_SHA}" >> "$GITHUB_ENV"

      - name: Build & Push image
        run: |
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Prepare env file for Cloud Run
        env:
          SECRET_KEY:  ${{ secrets.SECRET_KEY }}
          DB_USER:     ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          cat > env.yaml <<'EOF'
          DEBUG: "${DEBUG}"
          ALLOWED_HOSTS: "${ALLOWED_HOSTS}"
          CORS_ALLOWED_ORIGINS: "${CORS_ALLOWED_ORIGINS}"
          CSRF_TRUSTED_ORIGINS: "${CSRF_TRUSTED_ORIGINS}"
          CORS_ALLOW_CREDENTIALS: "${CORS_ALLOW_CREDENTIALS}"
          SESSION_COOKIE_SAMESITE: "${SESSION_COOKIE_SAMESITE}"
          SESSION_COOKIE_SECURE: "${SESSION_COOKIE_SECURE}"
          CSRF_COOKIE_SAMESITE: "${CSRF_COOKIE_SAMESITE}"
          CSRF_COOKIE_SECURE: "${CSRF_COOKIE_SECURE}"
          SESSION_COOKIE_DOMAIN: "${SESSION_COOKIE_DOMAIN}"
          CSRF_COOKIE_DOMAIN: "${CSRF_COOKIE_DOMAIN}"
          WEBAUTHN_RP_ID: "${WEBAUTHN_RP_ID}"
          BACKEND_ORIGIN: "${BACKEND_ORIGIN}"
          TIME_ZONE: "${TIME_ZONE}"
          MAX_FAILED_LOGIN_ATTEMPTS: "${MAX_FAILED_LOGIN_ATTEMPTS}"
          ACCOUNT_LOCKOUT_DURATION: "${ACCOUNT_LOCKOUT_DURATION}"
          CACHE_BACKEND: "${CACHE_BACKEND}"
          CACHE_LOCATION: "${CACHE_LOCATION}"
          SESSION_ENGINE: "${SESSION_ENGINE}"
          DB_ENGINE: "${DB_ENGINE}"
          DB_NAME: "${DB_NAME}"
          DB_HOST: "${DB_HOST:-/cloudsql/${CLOUDSQL_INSTANCE}}"
          DB_PORT: "${DB_PORT}"
          SECRET_KEY: "${SECRET_KEY}"
          DB_USER: "${DB_USER}"
          DB_PASSWORD: "${DB_PASSWORD}"
          EOF
          echo "Wrote env.yaml:"
          cat env.yaml

      - name: Deploy to Cloud Run
        run: |
          ARGS=()
          if [ -n "${CLOUDSQL_INSTANCE}" ]; then
            ARGS+=(--add-cloudsql-instances="${CLOUDSQL_INSTANCE}")
          fi
          gcloud run deploy "${CLOUD_RUN_SERVICE}" \
            --image="${IMAGE}" \
            --region="${GCP_REGION}" \
            --platform=managed \
            --env-vars-file=env.yaml \
            --allow-unauthenticated "${ARGS[@]}"