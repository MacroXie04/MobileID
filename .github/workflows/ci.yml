name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      docs-changed: ${{ steps.changes.outputs.docs }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Detect changes
      id: changes
      run: |
        if git diff HEAD~1 --name-only | grep -E "(src/|requirements.txt)" > /dev/null; then
          echo "backend=true" >> $GITHUB_OUTPUT
        else
          echo "backend=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff HEAD~1 --name-only | grep -E "(pages/)" > /dev/null; then
          echo "frontend=true" >> $GITHUB_OUTPUT
        else
          echo "frontend=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff HEAD~1 --name-only | grep -E "(.*\.md|docs/)" > /dev/null; then
          echo "docs=true" >> $GITHUB_OUTPUT
        else
          echo "docs=false" >> $GITHUB_OUTPUT
        fi

  backend-tests:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    env:
      DJANGO_SETTINGS_MODULE: mobileid.test_settings
      SECRET_KEY: ci-test-secret-key-${{ github.sha }}
      DEBUG: False

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt coverage

    - name: Run Django tests
      working-directory: ./src
      run: |
        python manage.py check
        python manage.py migrate --no-input
        python manage.py collectstatic --no-input
        
        # Run tests with coverage
        coverage run --source='.' --omit='*/migrations/*,*/venv/*,manage.py,*/settings.py,*/wsgi.py,*/asgi.py' \
          manage.py test --verbosity=2
        coverage report --show-missing
        coverage xml

    - name: Upload coverage
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./src/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    defaults:
      run:
        working-directory: ./pages

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
        cache-dependency-path: pages/yarn.lock

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Lint and format check
      run: |
        yarn lint
        yarn format:check || echo "Format check completed"

    - name: Build application
      run: yarn build

    - name: Test build
      run: |
        if [ -d "dist" ]; then
          echo "✅ Frontend build successful"
        else
          echo "❌ Frontend build failed"
          exit 1
        fi

  security-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scanner
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

    - name: Check for vulnerabilities in Python dependencies
      run: |
        pip install -r requirements.txt
        safety check

    - name: Setup Node.js for frontend security check
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
        cache-dependency-path: pages/yarn.lock

    - name: Frontend security audit
      working-directory: ./pages
      run: |
        yarn install --frozen-lockfile
        yarn audit --level moderate || echo "Security audit completed with warnings"

  integration-tests:
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') && (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
        cache-dependency-path: pages/yarn.lock

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./pages
      run: yarn install --frozen-lockfile

    - name: Build frontend
      working-directory: ./pages
      run: yarn build

    - name: Start Django backend
      working-directory: ./src
      env:
        DJANGO_SETTINGS_MODULE: mobileid.test_settings
        SECRET_KEY: integration-test-key-${{ github.sha }}
      run: |
        python manage.py migrate
        python manage.py collectstatic --noinput
        python manage.py runserver 8000 &
        echo $! > backend.pid
        sleep 5

    - name: Test backend API endpoints
      run: |
        # Test admin is accessible
        curl -f -I http://localhost:8000/admin/ | grep -E "(200|302)"
        
        # Test API endpoints return appropriate responses
        curl -f -I http://localhost:8000/authn/user_info/ | grep "401"
        curl -f -I http://localhost:8000/generate_barcode/ | grep "401"
        
        echo "✅ Integration tests passed"

    - name: Cleanup
      if: always()
      working-directory: ./src
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi

  documentation-check:
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Markdown files
      run: |
        # Basic markdown syntax check
        find . -name "*.md" -not -path "./node_modules/*" -exec echo "Checking {}" \;

    - name: Validate README
      run: |
        if [ ! -f "README.md" ]; then
          echo "❌ README.md not found"
          exit 1
        fi
        echo "✅ README.md exists"

    - name: Check SECURITY.md
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "❌ SECURITY.md not found"
          exit 1
        fi
        echo "✅ SECURITY.md exists"

  deployment-readiness:
    needs: [backend-tests, frontend-tests, security-checks, integration-tests]
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check deployment readiness
      run: |
        echo "🚀 Checking deployment readiness..."
        
        # Check if all required files exist
        required_files=(
          "requirements.txt"
          "src/manage.py"
          "src/mobileid/settings.py"
          "src/mobileid/wsgi.py"
          "pages/package.json"
          "SECURITY.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        echo "✅ All deployment files present"

    - name: Create deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Backend tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security checks: ${{ needs.security-checks.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.backend-tests.result }}" = "success" ] && [ "${{ needs.frontend-tests.result }}" = "success" ] && [ "${{ needs.security-checks.result }}" = "success" ] && [ "${{ needs.integration-tests.result }}" = "success" ]; then
          echo "🟢 **Ready for deployment**" >> $GITHUB_STEP_SUMMARY
        else
          echo "🔴 **Not ready for deployment**" >> $GITHUB_STEP_SUMMARY
        fi

  notify-status:
    needs: [backend-tests, frontend-tests, security-checks, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        backend_status="${{ needs.backend-tests.result }}"
        frontend_status="${{ needs.frontend-tests.result }}"
        security_status="${{ needs.security-checks.result }}"
        integration_status="${{ needs.integration-tests.result }}"
        
        # Consider skipped as success for conditional jobs
        if [ "$backend_status" = "skipped" ]; then backend_status="success"; fi
        if [ "$frontend_status" = "skipped" ]; then frontend_status="success"; fi
        
        if [ "$backend_status" = "success" ] && [ "$frontend_status" = "success" ] && [ "$security_status" = "success" ] && [ "$integration_status" = "success" ]; then
          echo "result=success" >> $GITHUB_OUTPUT
          echo "message=🎉 All tests passed! MobileID is ready." >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some tests failed. Please check the logs." >> $GITHUB_OUTPUT
        fi

    - name: Report status
      run: |
        echo "${{ steps.status.outputs.message }}"
        
        if [ "${{ steps.status.outputs.result }}" = "failure" ]; then
          exit 1
        fi